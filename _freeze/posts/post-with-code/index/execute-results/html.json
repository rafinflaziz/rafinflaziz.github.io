{
  "hash": "fff6d3e00909eaa099fc9599b5d1a127",
  "result": {
    "markdown": "---\ntitle: matplotlib demo\nformat:\n  html:\n    code-fold: true\n---\n\n# Preparation\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:46.132930Z\",\"start_time\":\"2023-11-16T10:33:46.124798Z\"}' execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nmatplotlib.use('Qt5Agg')\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:47.607868Z\",\"start_time\":\"2023-11-16T10:33:46.537743Z\"}' execution_count=2}\n``` {.python .cell-code}\n# Data Preview\ndata = pd.read_excel(\n    \"Data Analisis Statistik-2023-kualitas air-raw.xlsx\", index_col=0)\n\n# We don't need these '>BM xx' data because we don't have information about what these indicators really mean\n# Also, for skill demonstration purpose, I will remove the 'Kode' and 'Jenis Air' columns first.\ndata = data.drop(['Nomor sampel', 'Kode', 'Jenis Air', '>BM Cd',\n                 '>bm Hg', '>BM Mn', '>BM Pb', '>BM Zn', '>BM Fe'], axis=1)\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sampel ID</th>\n      <th>As</th>\n      <th>Cd</th>\n      <th>Co</th>\n      <th>Cr</th>\n      <th>Cu</th>\n      <th>Fe</th>\n      <th>Hg</th>\n      <th>Mn</th>\n      <th>Pb</th>\n      <th>Zn</th>\n    </tr>\n    <tr>\n      <th>No</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>MJ-AS-01</td>\n      <td>0.0062</td>\n      <td>0.0001</td>\n      <td>0.0026</td>\n      <td>0.0069</td>\n      <td>0.0100</td>\n      <td>1.6585</td>\n      <td>0.0001</td>\n      <td>0.3428</td>\n      <td>0.0001</td>\n      <td>0.1079</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MJ-AS-03</td>\n      <td>0.0212</td>\n      <td>0.0006</td>\n      <td>0.0001</td>\n      <td>0.0070</td>\n      <td>0.0077</td>\n      <td>3.7910</td>\n      <td>0.0001</td>\n      <td>0.4119</td>\n      <td>0.0119</td>\n      <td>0.0309</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>MJ-AS-04</td>\n      <td>0.0065</td>\n      <td>0.0001</td>\n      <td>0.0001</td>\n      <td>0.0062</td>\n      <td>0.0073</td>\n      <td>0.0820</td>\n      <td>0.0001</td>\n      <td>0.2206</td>\n      <td>0.0186</td>\n      <td>0.0521</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>MJ-AS-05</td>\n      <td>0.0162</td>\n      <td>0.0006</td>\n      <td>0.0001</td>\n      <td>0.0084</td>\n      <td>0.0094</td>\n      <td>1.4833</td>\n      <td>0.0001</td>\n      <td>0.4985</td>\n      <td>0.0001</td>\n      <td>0.0886</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>MJ-AS-05B</td>\n      <td>0.0194</td>\n      <td>0.0001</td>\n      <td>0.0001</td>\n      <td>0.0086</td>\n      <td>0.0098</td>\n      <td>2.3356</td>\n      <td>0.0001</td>\n      <td>0.1716</td>\n      <td>0.0196</td>\n      <td>0.0641</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>SR-ASAM-08</td>\n      <td>0.0164</td>\n      <td>0.0001</td>\n      <td>0.0001</td>\n      <td>0.0059</td>\n      <td>0.0024</td>\n      <td>0.3552</td>\n      <td>0.0001</td>\n      <td>0.0012</td>\n      <td>0.0001</td>\n      <td>0.0739</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>SR-ASAM-14</td>\n      <td>0.0196</td>\n      <td>0.0019</td>\n      <td>0.0171</td>\n      <td>0.0053</td>\n      <td>0.0125</td>\n      <td>0.1067</td>\n      <td>0.0001</td>\n      <td>0.7120</td>\n      <td>0.0495</td>\n      <td>0.8312</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>SR-ASAM-20</td>\n      <td>0.0062</td>\n      <td>0.0001</td>\n      <td>0.0085</td>\n      <td>0.0076</td>\n      <td>0.0089</td>\n      <td>0.0684</td>\n      <td>0.0001</td>\n      <td>1.1956</td>\n      <td>0.0235</td>\n      <td>0.0755</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>SR-ASAM-21</td>\n      <td>0.0070</td>\n      <td>0.0001</td>\n      <td>0.0015</td>\n      <td>0.0072</td>\n      <td>0.0033</td>\n      <td>0.0547</td>\n      <td>0.0050</td>\n      <td>0.1624</td>\n      <td>0.0001</td>\n      <td>0.0606</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>SR-ASAM-22</td>\n      <td>0.0110</td>\n      <td>0.0001</td>\n      <td>0.0002</td>\n      <td>0.0054</td>\n      <td>0.0021</td>\n      <td>0.0826</td>\n      <td>0.0001</td>\n      <td>0.0058</td>\n      <td>0.0001</td>\n      <td>0.8351</td>\n    </tr>\n  </tbody>\n</table>\n<p>160 rows × 11 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Extract Code and Water Type\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:47.794090Z\",\"start_time\":\"2023-11-16T10:33:47.773397Z\"}' execution_count=3}\n``` {.python .cell-code}\n# split the ID value, then get the first string for the region and second string for the type\ndata['Region'] = data['Sampel ID'].str.split('-').str[0]\ndata['Type'] = data['Sampel ID'].str.split('-').str[1]\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:47.979347Z\",\"start_time\":\"2023-11-16T10:33:47.965648Z\"}' execution_count=4}\n``` {.python .cell-code}\ndata['Type'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray(['AS', 'ASAM', '08', '11', '12', '13', 'ASAM‐19'], dtype=object)\n```\n:::\n:::\n\n\nThe 'type' column should only consists of AS or ASAM. As you can see, there's another value present in this data. Let's figure out which rows contains these errors.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:48.699341Z\",\"start_time\":\"2023-11-16T10:33:48.669369Z\"}' execution_count=5}\n``` {.python .cell-code}\ndata[~data['Sampel ID'].str.split('-').str[1].isin(['AS', 'ASAM'])]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sampel ID</th>\n      <th>As</th>\n      <th>Cd</th>\n      <th>Co</th>\n      <th>Cr</th>\n      <th>Cu</th>\n      <th>Fe</th>\n      <th>Hg</th>\n      <th>Mn</th>\n      <th>Pb</th>\n      <th>Zn</th>\n      <th>Region</th>\n      <th>Type</th>\n    </tr>\n    <tr>\n      <th>No</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>52</th>\n      <td>CP-08-AS</td>\n      <td>0.0155</td>\n      <td>0.0010</td>\n      <td>0.0001</td>\n      <td>0.0128</td>\n      <td>0.0113</td>\n      <td>6.2391</td>\n      <td>0.0001</td>\n      <td>0.6119</td>\n      <td>0.0142</td>\n      <td>0.1370</td>\n      <td>CP</td>\n      <td>08</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>CP-11-ASAM</td>\n      <td>0.0190</td>\n      <td>0.0009</td>\n      <td>0.0001</td>\n      <td>0.0172</td>\n      <td>0.0106</td>\n      <td>0.2971</td>\n      <td>0.0001</td>\n      <td>0.0250</td>\n      <td>0.0151</td>\n      <td>0.1104</td>\n      <td>CP</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>CP-12-AS</td>\n      <td>0.0134</td>\n      <td>0.0001</td>\n      <td>0.0008</td>\n      <td>0.0186</td>\n      <td>0.0119</td>\n      <td>0.2941</td>\n      <td>0.0001</td>\n      <td>0.2472</td>\n      <td>0.0049</td>\n      <td>0.1761</td>\n      <td>CP</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>CP-13-AS</td>\n      <td>0.0133</td>\n      <td>0.0010</td>\n      <td>0.0016</td>\n      <td>0.0296</td>\n      <td>0.0138</td>\n      <td>3.1102</td>\n      <td>0.0001</td>\n      <td>0.4770</td>\n      <td>0.0055</td>\n      <td>0.1123</td>\n      <td>CP</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>CP-ASAM‐19</td>\n      <td>0.0023</td>\n      <td>0.0010</td>\n      <td>0.0001</td>\n      <td>0.0135</td>\n      <td>0.0311</td>\n      <td>0.1585</td>\n      <td>0.0001</td>\n      <td>0.0893</td>\n      <td>0.0001</td>\n      <td>0.2647</td>\n      <td>CP</td>\n      <td>ASAM‐19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLooks like there are only 5 rows that are problematic. Let's just fix them manually.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:50.398879Z\",\"start_time\":\"2023-11-16T10:33:50.387147Z\"}' execution_count=6}\n``` {.python .cell-code}\ndata.loc[[52, 54, 55], 'Type'] = 'AS'\ndata.loc[[53, 70], 'Type'] = 'ASAM'\n```\n:::\n\n\nLet's change if those rows already been changed.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:51.132678Z\",\"start_time\":\"2023-11-16T10:33:51.092273Z\"}' execution_count=7}\n``` {.python .cell-code}\ndata[~data['Sampel ID'].str.split('-').str[1].isin(['AS', 'ASAM'])]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sampel ID</th>\n      <th>As</th>\n      <th>Cd</th>\n      <th>Co</th>\n      <th>Cr</th>\n      <th>Cu</th>\n      <th>Fe</th>\n      <th>Hg</th>\n      <th>Mn</th>\n      <th>Pb</th>\n      <th>Zn</th>\n      <th>Region</th>\n      <th>Type</th>\n    </tr>\n    <tr>\n      <th>No</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>52</th>\n      <td>CP-08-AS</td>\n      <td>0.0155</td>\n      <td>0.0010</td>\n      <td>0.0001</td>\n      <td>0.0128</td>\n      <td>0.0113</td>\n      <td>6.2391</td>\n      <td>0.0001</td>\n      <td>0.6119</td>\n      <td>0.0142</td>\n      <td>0.1370</td>\n      <td>CP</td>\n      <td>AS</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>CP-11-ASAM</td>\n      <td>0.0190</td>\n      <td>0.0009</td>\n      <td>0.0001</td>\n      <td>0.0172</td>\n      <td>0.0106</td>\n      <td>0.2971</td>\n      <td>0.0001</td>\n      <td>0.0250</td>\n      <td>0.0151</td>\n      <td>0.1104</td>\n      <td>CP</td>\n      <td>ASAM</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>CP-12-AS</td>\n      <td>0.0134</td>\n      <td>0.0001</td>\n      <td>0.0008</td>\n      <td>0.0186</td>\n      <td>0.0119</td>\n      <td>0.2941</td>\n      <td>0.0001</td>\n      <td>0.2472</td>\n      <td>0.0049</td>\n      <td>0.1761</td>\n      <td>CP</td>\n      <td>AS</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>CP-13-AS</td>\n      <td>0.0133</td>\n      <td>0.0010</td>\n      <td>0.0016</td>\n      <td>0.0296</td>\n      <td>0.0138</td>\n      <td>3.1102</td>\n      <td>0.0001</td>\n      <td>0.4770</td>\n      <td>0.0055</td>\n      <td>0.1123</td>\n      <td>CP</td>\n      <td>AS</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>CP-ASAM‐19</td>\n      <td>0.0023</td>\n      <td>0.0010</td>\n      <td>0.0001</td>\n      <td>0.0135</td>\n      <td>0.0311</td>\n      <td>0.1585</td>\n      <td>0.0001</td>\n      <td>0.0893</td>\n      <td>0.0001</td>\n      <td>0.2647</td>\n      <td>CP</td>\n      <td>ASAM</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# EDA\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:52.384357Z\",\"start_time\":\"2023-11-16T10:33:52.351681Z\"}' execution_count=8}\n``` {.python .cell-code}\ndata['Region'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nRegion\nMJ    27\nRC    25\nBL    24\nCP    24\nSR    22\nPC    20\nPL    18\nName: count, dtype: int64\n```\n:::\n:::\n\n\n## Proportion Visualization\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:53.556143Z\",\"start_time\":\"2023-11-16T10:33:53.288192Z\"}' execution_count=9}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 5))\nsns.countplot(data=data, x='Region', order=data['Region'].value_counts().index, color=\"tab:green\")\nplt.title(\"Number of Well in Each Region\")\nplt.show()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:54.303649Z\",\"start_time\":\"2023-11-16T10:33:54.090913Z\"}' execution_count=10}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 5))\nsns.countplot(data=data, x='Type')\nplt.title(\"Number of Well from Each Water Type\")\nplt.show()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:54.862338Z\",\"start_time\":\"2023-11-16T10:33:54.509990Z\"}' execution_count=11}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 5))\nsns.countplot(x='Region',\n              data=data,\n              order=['BL', 'CP', 'MJ', 'PC', 'PL', 'RC', 'SR'],\n              hue='Type')\nplt.title(\"Number of Well in Each Region by Water Type\")\nplt.show()\n```\n:::\n\n\n# Distribution dan Correlation Visualization\n\n**Catatan** <br>\n**- Loading dapat memakan waktu** <br>\n**- Double click untuk zoom in**\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:33:59.821070Z\",\"start_time\":\"2023-11-16T10:33:55.844301Z\"}' execution_count=12}\n``` {.python .cell-code}\nfrom scipy.stats import pearsonr\n\ndef corrfunc(x, y, ax=None, hue=None, **kws):\n    \"\"\"Plot the correlation coefficient in the top left hand corner of a plot.\"\"\"\n    r, _ = pearsonr(x, y)\n    ax = ax or plt.gca()\n    ax.annotate(f'ρ = {r:.2f}', xy=(.1, .9), xycoords=ax.transAxes)\n\nplt.figure(figsize=(20, 20))\ng = sns.pairplot(data=data[['Pb', 'Cd', 'Hg', 'Type']], hue='Type', diag_kind='hist')\ng.map_lower(corrfunc)\nplt.show()\n```\n:::\n\n\n## Mean of Substances Concentration in Each Region\n\n### Full Data\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:03.271830Z\",\"start_time\":\"2023-11-16T10:35:02.341272Z\"}' execution_count=13}\n``` {.python .cell-code}\ndata_gp = data.iloc[:, 1:-1].groupby(['Region']).agg('mean')\nres = data_gp.reset_index()\nres_wide = res.melt(id_vars=\"Region\")\n\nplt.figure(figsize=(12, 9.5))\nsns.barplot(x=\"Region\", y=\"value\", data=res_wide, hue='variable')\nplt.title('Mean of Substances Concentration in Each Region')\nplt.ylabel('')\nplt.show()\n```\n:::\n\n\n### AS Only Data\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:16.358398Z\",\"start_time\":\"2023-11-16T10:35:15.541613Z\"}' execution_count=14}\n``` {.python .cell-code}\ndata_gp = data[data['Type'] == 'AS'].iloc[:, 1:-1].groupby(['Region']).agg('mean')\nres = data_gp.reset_index()\nres_wide=res.melt(id_vars=\"Region\")\n\nplt.figure(figsize=(12,9.5))\nsns.barplot(x=\"Region\", y=\"value\",data=res_wide, hue='variable')\nplt.title('Mean of Substances Concentration in Each Region (AS Only)')\nplt.ylabel('')\nplt.ylim(0, 2.5)\nplt.show()\n```\n:::\n\n\n### ASAM Only Data\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:25.178927Z\",\"start_time\":\"2023-11-16T10:35:24.135423Z\"}' execution_count=15}\n``` {.python .cell-code}\ndata_gp = data[data['Type'] == 'ASAM'].iloc[:, 1:-1].groupby(['Region']).agg('mean')\nres = data_gp.reset_index()\nres_wide=res.melt(id_vars=\"Region\")\n\nplt.figure(figsize=(12,9.5))\nsns.barplot(x=\"Region\", y=\"value\",data=res_wide, hue='variable')\nplt.title('Mean of Substances Concentration in Each Region (ASAM Only)')\nplt.ylabel('')\nplt.ylim(0, 2.5)\nplt.show()\n```\n:::\n\n\n# Clustering\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:35.315131Z\",\"start_time\":\"2023-11-16T10:35:35.299540Z\"}' execution_count=16}\n``` {.python .cell-code}\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n```\n:::\n\n\n## Aggregation\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:41.559089Z\",\"start_time\":\"2023-11-16T10:35:41.551955Z\"}' execution_count=17}\n``` {.python .cell-code}\ndata = data.iloc[:, 1:-1]\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:42.042482Z\",\"start_time\":\"2023-11-16T10:35:42.017471Z\"}' execution_count=18}\n``` {.python .cell-code}\nagg_mean = data.groupby('Region').agg('mean')\nagg_mean\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>As</th>\n      <th>Cd</th>\n      <th>Co</th>\n      <th>Cr</th>\n      <th>Cu</th>\n      <th>Fe</th>\n      <th>Hg</th>\n      <th>Mn</th>\n      <th>Pb</th>\n      <th>Zn</th>\n    </tr>\n    <tr>\n      <th>Region</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>BL</th>\n      <td>0.011117</td>\n      <td>0.001004</td>\n      <td>0.001029</td>\n      <td>0.008858</td>\n      <td>0.014692</td>\n      <td>0.973554</td>\n      <td>0.013504</td>\n      <td>0.377721</td>\n      <td>0.009838</td>\n      <td>0.455558</td>\n    </tr>\n    <tr>\n      <th>CP</th>\n      <td>0.012358</td>\n      <td>0.000517</td>\n      <td>0.000938</td>\n      <td>0.014554</td>\n      <td>0.013850</td>\n      <td>1.534404</td>\n      <td>0.000308</td>\n      <td>0.711413</td>\n      <td>0.007667</td>\n      <td>0.130892</td>\n    </tr>\n    <tr>\n      <th>MJ</th>\n      <td>0.008978</td>\n      <td>0.001396</td>\n      <td>0.000778</td>\n      <td>0.008219</td>\n      <td>0.008593</td>\n      <td>1.746515</td>\n      <td>0.000100</td>\n      <td>0.500022</td>\n      <td>0.019404</td>\n      <td>0.112393</td>\n    </tr>\n    <tr>\n      <th>PC</th>\n      <td>0.012085</td>\n      <td>0.000790</td>\n      <td>0.001235</td>\n      <td>0.009540</td>\n      <td>0.011375</td>\n      <td>0.461930</td>\n      <td>0.000100</td>\n      <td>1.225370</td>\n      <td>0.013360</td>\n      <td>0.048860</td>\n    </tr>\n    <tr>\n      <th>PL</th>\n      <td>0.009483</td>\n      <td>0.000633</td>\n      <td>0.002061</td>\n      <td>0.009728</td>\n      <td>0.009356</td>\n      <td>0.269589</td>\n      <td>0.008478</td>\n      <td>0.775944</td>\n      <td>0.005300</td>\n      <td>0.252650</td>\n    </tr>\n    <tr>\n      <th>RC</th>\n      <td>0.013460</td>\n      <td>0.001476</td>\n      <td>0.000780</td>\n      <td>0.011820</td>\n      <td>0.009332</td>\n      <td>0.999200</td>\n      <td>0.000100</td>\n      <td>0.658616</td>\n      <td>0.029140</td>\n      <td>0.143132</td>\n    </tr>\n    <tr>\n      <th>SR</th>\n      <td>0.009836</td>\n      <td>0.001145</td>\n      <td>0.001818</td>\n      <td>0.006677</td>\n      <td>0.005350</td>\n      <td>0.718868</td>\n      <td>0.004595</td>\n      <td>0.833150</td>\n      <td>0.018445</td>\n      <td>0.156645</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Dendrogram\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:43.089785Z\",\"start_time\":\"2023-11-16T10:35:42.793238Z\"}' execution_count=19}\n``` {.python .cell-code}\nagg_mean = data.groupby('Region').agg('mean')\nZ = linkage(agg_mean, 'single')\nfig = plt.figure(figsize=(25, 10))\ndn = dendrogram(Z, labels=agg_mean.index)\nplt.title('Single')\nplt.show()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:43.761361Z\",\"start_time\":\"2023-11-16T10:35:43.419205Z\"}' execution_count=20}\n``` {.python .cell-code}\nZ = linkage(agg_mean, 'average')\nfig = plt.figure(figsize=(25, 10))\ndn = dendrogram(Z, labels=agg_mean.index)\nplt.title('Average')\nplt.show()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:44.363466Z\",\"start_time\":\"2023-11-16T10:35:44.100921Z\"}' execution_count=21}\n``` {.python .cell-code}\nZ = linkage(agg_mean, 'complete')\nfig = plt.figure(figsize=(25, 10))\ndn = dendrogram(Z, labels=agg_mean.index)\nplt.title('Complete')\nplt.show()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:45.044897Z\",\"start_time\":\"2023-11-16T10:35:44.736862Z\"}' execution_count=22}\n``` {.python .cell-code}\nZ = linkage(agg_mean, 'ward')\nfig = plt.figure(figsize=(25, 10))\ndn = dendrogram(Z, labels=agg_mean.index)\nplt.title('Ward')\nplt.show()\n```\n:::\n\n\n## Create Cluster Column\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:45.414814Z\",\"start_time\":\"2023-11-16T10:35:45.390938Z\"}' execution_count=23}\n``` {.python .cell-code}\ncluster_raw_single = {\"CP|MJ\":1, \"PC\":2, \"PL|BL|RC|SR\":3}\ndata['Single'] = data['Region'].replace(cluster_raw_single, regex=True)\n\ncluster_raw_avg = {\"CP|MJ\":1, \"BL|RC|SR\":2, \"PC|PL\":3}\ndata['Others'] = data['Region'].replace(cluster_raw_avg, regex=True)\n```\n:::\n\n\n# Assign Longitude and Latitude\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:45.754221Z\",\"start_time\":\"2023-11-16T10:35:45.739576Z\"}' execution_count=24}\n``` {.python .cell-code}\nreplacer_long = {\"MJ\": 107.746994, \"BL\": 107.631878, \"RC\": 107.759404, \"SR\": 107.532008, \"PL\": 107.566423, \"PC\": 107.698135, \"CP\": 107.710501}\nreplacer_lat = {\"MJ\": -7.054680, \"BL\": -7.004517, \"RC\": -6.971517, \"SR\": -7.025404, \"PL\": -7.195907, \"PC\": -7.119608, \"CP\": -7.037803}\ndata['longitude'] = data['Region'].replace(replacer_long).astype(float)\ndata['latitude'] = data['Region'].replace(replacer_lat).astype(float)\n```\n:::\n\n\n# Full Data\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:46.249290Z\",\"start_time\":\"2023-11-16T10:35:46.208841Z\"}' execution_count=25}\n``` {.python .cell-code}\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>As</th>\n      <th>Cd</th>\n      <th>Co</th>\n      <th>Cr</th>\n      <th>Cu</th>\n      <th>Fe</th>\n      <th>Hg</th>\n      <th>Mn</th>\n      <th>Pb</th>\n      <th>Zn</th>\n      <th>Region</th>\n      <th>Single</th>\n      <th>Others</th>\n      <th>longitude</th>\n      <th>latitude</th>\n    </tr>\n    <tr>\n      <th>No</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.0062</td>\n      <td>0.0001</td>\n      <td>0.0026</td>\n      <td>0.0069</td>\n      <td>0.0100</td>\n      <td>1.6585</td>\n      <td>0.0001</td>\n      <td>0.3428</td>\n      <td>0.0001</td>\n      <td>0.1079</td>\n      <td>MJ</td>\n      <td>1</td>\n      <td>1</td>\n      <td>107.746994</td>\n      <td>-7.054680</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0212</td>\n      <td>0.0006</td>\n      <td>0.0001</td>\n      <td>0.0070</td>\n      <td>0.0077</td>\n      <td>3.7910</td>\n      <td>0.0001</td>\n      <td>0.4119</td>\n      <td>0.0119</td>\n      <td>0.0309</td>\n      <td>MJ</td>\n      <td>1</td>\n      <td>1</td>\n      <td>107.746994</td>\n      <td>-7.054680</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0065</td>\n      <td>0.0001</td>\n      <td>0.0001</td>\n      <td>0.0062</td>\n      <td>0.0073</td>\n      <td>0.0820</td>\n      <td>0.0001</td>\n      <td>0.2206</td>\n      <td>0.0186</td>\n      <td>0.0521</td>\n      <td>MJ</td>\n      <td>1</td>\n      <td>1</td>\n      <td>107.746994</td>\n      <td>-7.054680</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0162</td>\n      <td>0.0006</td>\n      <td>0.0001</td>\n      <td>0.0084</td>\n      <td>0.0094</td>\n      <td>1.4833</td>\n      <td>0.0001</td>\n      <td>0.4985</td>\n      <td>0.0001</td>\n      <td>0.0886</td>\n      <td>MJ</td>\n      <td>1</td>\n      <td>1</td>\n      <td>107.746994</td>\n      <td>-7.054680</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.0194</td>\n      <td>0.0001</td>\n      <td>0.0001</td>\n      <td>0.0086</td>\n      <td>0.0098</td>\n      <td>2.3356</td>\n      <td>0.0001</td>\n      <td>0.1716</td>\n      <td>0.0196</td>\n      <td>0.0641</td>\n      <td>MJ</td>\n      <td>1</td>\n      <td>1</td>\n      <td>107.746994</td>\n      <td>-7.054680</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>0.0164</td>\n      <td>0.0001</td>\n      <td>0.0001</td>\n      <td>0.0059</td>\n      <td>0.0024</td>\n      <td>0.3552</td>\n      <td>0.0001</td>\n      <td>0.0012</td>\n      <td>0.0001</td>\n      <td>0.0739</td>\n      <td>SR</td>\n      <td>3</td>\n      <td>2</td>\n      <td>107.532008</td>\n      <td>-7.025404</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>0.0196</td>\n      <td>0.0019</td>\n      <td>0.0171</td>\n      <td>0.0053</td>\n      <td>0.0125</td>\n      <td>0.1067</td>\n      <td>0.0001</td>\n      <td>0.7120</td>\n      <td>0.0495</td>\n      <td>0.8312</td>\n      <td>SR</td>\n      <td>3</td>\n      <td>2</td>\n      <td>107.532008</td>\n      <td>-7.025404</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>0.0062</td>\n      <td>0.0001</td>\n      <td>0.0085</td>\n      <td>0.0076</td>\n      <td>0.0089</td>\n      <td>0.0684</td>\n      <td>0.0001</td>\n      <td>1.1956</td>\n      <td>0.0235</td>\n      <td>0.0755</td>\n      <td>SR</td>\n      <td>3</td>\n      <td>2</td>\n      <td>107.532008</td>\n      <td>-7.025404</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>0.0070</td>\n      <td>0.0001</td>\n      <td>0.0015</td>\n      <td>0.0072</td>\n      <td>0.0033</td>\n      <td>0.0547</td>\n      <td>0.0050</td>\n      <td>0.1624</td>\n      <td>0.0001</td>\n      <td>0.0606</td>\n      <td>SR</td>\n      <td>3</td>\n      <td>2</td>\n      <td>107.532008</td>\n      <td>-7.025404</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>0.0110</td>\n      <td>0.0001</td>\n      <td>0.0002</td>\n      <td>0.0054</td>\n      <td>0.0021</td>\n      <td>0.0826</td>\n      <td>0.0001</td>\n      <td>0.0058</td>\n      <td>0.0001</td>\n      <td>0.8351</td>\n      <td>SR</td>\n      <td>3</td>\n      <td>2</td>\n      <td>107.532008</td>\n      <td>-7.025404</td>\n    </tr>\n  </tbody>\n</table>\n<p>160 rows × 15 columns</p>\n</div>\n```\n:::\n:::\n\n\n# Plot According to Geographical Data\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:35:52.236158Z\",\"start_time\":\"2023-11-16T10:35:51.882714Z\"}' execution_count=26}\n``` {.python .cell-code}\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# To install:\n# !pip install plotly\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:36:06.867621Z\",\"start_time\":\"2023-11-16T10:36:06.852271Z\"}' execution_count=27}\n``` {.python .cell-code}\n# color_scale = [(0, 'red'), (1,'green')]\n# data_agg = data.groupby(['Region']).agg('mean')\n\n# fig = px.scatter_mapbox(data_agg, \n#                         lat=\"latitude\", \n#                         lon=\"longitude\", \n#                         color=\"Single\",\n#                         zoom=8,\n#                         height=500,\n#                         width=500,\n#                         text = list(data_agg.index))\n\n# fig.update_layout(mapbox_style=\"carto-positron\")\n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.update_traces(marker={'size': 15})\n# fig.update_traces(textposition='top center')\n# fig.show()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-16T10:25:08.111251Z\",\"start_time\":\"2023-11-16T10:25:00.705Z\"}' execution_count=28}\n``` {.python .cell-code}\n# color_scale = [(0, 'orange'), (1,'red')]\n\n# fig = px.scatter_mapbox(data_agg, \n#                         lat=\"latitude\", \n#                         lon=\"longitude\", \n#                         color='Others',\n#                         hover_data={'index': (data_agg.index)},\n#                         zoom=8,\n#                         height=500,\n#                         width=500)\n\n# fig.update_layout(mapbox_style=\"carto-positron\")\n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.update_traces(marker={'size': 15})\n# fig.show()\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}